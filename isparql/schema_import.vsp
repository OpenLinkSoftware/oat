<?vsp 
--  
--  $Id$
--
--  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
--  project.
--  
--  Copyright (C) 1998-2007 OpenLink Software
--  
--  This project is free software; you can redistribute it and/or modify it
--  under the terms of the GNU General Public License as published by the
--  Free Software Foundation; only version 2 of the License, dated June 1991.
--  
--  This program is distributed in the hope that it will be useful, but
--  WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
--  General Public License for more details.
--  
--  You should have received a copy of the GNU General Public License along
--  with this program; if not, write to the Free Software Foundation, Inc.,
--  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
--  

{
  declare exit handler for SQLSTATE '*' {
    http_rewrite();
    http_request_status (sprintf ('HTTP/1.1 %s %s', '500', 'Schema Retrieve Failed'));
    http_header ('Content-Type: text/plain\r\n');
    http(__SQL_STATE || ':' || __SQL_MESSAGE);
  };

  declare _schema varchar;
  declare _f,_loopcnt integer;
  declare _data, _rdf, _xml any;
  _schema := trim({?'default-graph-uri'});

  if (not(_schema) or _schema is null) 
    signal('SCHIMP','Empty schema');

  if (0 = length(DB.DBA.SPARQL_EVAL_TO_ARRAY ('select * where {graph <'||_schema||'> { ?s ?p ?o }}',_schema,1)))
  {
    declare return_header any;
    
    {
      if (_schema = 'http://atomowl.org/ontologies/atomrdf#')
        _data := http_get('http://atomowl.org/ontologies/atomrdf.rdf',return_header);
      else if (_schema = 'http://purl.org/ibis#')
        _data := http_get('http://dannyayers.com:88/xmlns/ibis/ibis.rdfs',return_header);
      else 

      {
       declare continue handler for SQLSTATE '2E000' {
          _data := http_get(replace(_schema,'http://','http://www.'),return_header);
        };
        _data := http_get(_schema,return_header);
      }
    }

    _loopcnt := 0;
    while(http_request_header(return_header,'Location',null,'') <> '')
    {
      _data := http_get(http_request_header(return_header,'Location'),return_header);
      _loopcnt := _loopcnt + 1;
      if (_loopcnt > 10)
        signal('SCMRTV','Couldn''t retrive resource. Too many redirects.');
    }
    _xml := xml_tree(_data);
    _xml := xml_tree_doc(_xml);
    
    _rdf := xpath_eval ('[ xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" ] //rdf:RDF', _xml);
    if (_rdf is null and strstr(_data,'<rdf:RDF'))
    {
      declare inx integer;
      inx := strstr(_data,'<rdf:RDF') + 1;
      _data := substring(_data,inx,strstr(_data,'</rdf:RDF>') - inx + 11);
      _xml := xml_tree(_data);
      _xml := xml_tree_doc(_xml);
      _rdf := xpath_eval ('[ xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" ] //rdf:RDF', _xml);
   }
    
    if (_rdf is not null)
    {
      DELETE FROM DB.DBA.RDF_QUAD where G = DB.DBA.RDF_MAKE_IID_OF_QNAME (_schema);
      DB.DBA.RDF_LOAD_RDFXML(serialize_to_UTF8_xml(_rdf),_schema,_schema);
    }
    
  }
}  

  WS.WS."/!sparql/" (path, params, lines);
  
  return;
   
?>
